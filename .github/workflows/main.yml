name: Build README with markdown-pdf

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'  # Specify Node.js version

    - name: Install dependencies
      run: npm install puppeteer markdown-it

    - name: Convert README.md to PDF using puppeteer
      run: |
        node -e "
        const puppeteer = require('puppeteer');
        const fs = require('fs');
        const markdownit = require('markdown-it');
        const md = markdownit();

        async function convert() {
          console.log('Starting PDF conversion...');

          // Check if README.md exists
          if (!fs.existsSync('README.md')) {
            throw new Error('README.md not found');
          }

          const markdown = fs.readFileSync('README.md', 'utf8');
          console.log('README.md loaded, length:', markdown.length);

          const html = md.render(markdown);
          console.log('HTML rendered, length:', html.length);

          const browser = await puppeteer.launch({
            args: ['--no-sandbox', '--disable-setuid-sandbox']
          });

          const page = await browser.newPage();
          await page.setContent(html, { waitUntil: 'networkidle2' });

          await page.pdf({
            path: 'README.pdf',
            format: 'A4',
            printBackground: true,
            margin: { top: '2cm', right: '2cm', bottom: '2cm', left: '2cm' }
          });

          await browser.close();
          console.log('PDF created successfully');

          // Verify file exists
          if (fs.existsSync('README.pdf')) {
            const stats = fs.statSync('README.pdf');
            console.log('PDF file size:', stats.size, 'bytes');
          } else {
            throw new Error('PDF file was not created');
          }
        }

        convert().catch(err => {
          console.error('Error:', err);
          process.exit(1);
        });
        "

    # Optionally, upload the artifact (the generated PDF)
    - name: Upload README.pdf
      uses: actions/upload-artifact@v4
      with:
        name: README-pdf
        path: README.pdf
